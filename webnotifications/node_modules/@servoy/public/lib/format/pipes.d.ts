import { PipeTransform } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
export declare class MnemonicletterFilterPipe implements PipeTransform {
    transform(input: string, letter: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<MnemonicletterFilterPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<MnemonicletterFilterPipe, "mnemonicletterFilter">;
}
export declare class NotNullOrEmptyPipe implements PipeTransform {
    transform(value: any[], _args?: any): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotNullOrEmptyPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<NotNullOrEmptyPipe, "notNullOrEmpty">;
}
export declare class HtmlFilterPipe implements PipeTransform {
    transform(input: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<HtmlFilterPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<HtmlFilterPipe, "htmlFilter">;
}
export declare class TrustAsHtmlPipe implements PipeTransform {
    private domSanitizer;
    constructor(domSanitizer: DomSanitizer);
    transform(input: string, trustAsHtml: boolean): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<TrustAsHtmlPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<TrustAsHtmlPipe, "trustAsHtml">;
}
