import { Input, ViewChild, Directive, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
// eslint-disable-next-line
export class ServoyBaseComponent {
    constructor(renderer, cdRef) {
        this.renderer = renderer;
        this.cdRef = cdRef;
        this.viewStateListeners = new Set();
        this.componentContributor = new ComponentContributor();
    }
    // final method, do not override
    ngOnInit() {
        this.initializeComponent();
        this.servoyApi.registerComponent(this);
    }
    // final method, do not override
    ngAfterViewInit() {
        this.initializeComponent();
        if (this.elementRef && this.changes) {
            this.svyOnChanges(this.changes);
            this.changes = null;
        }
        this.cdRef.detectChanges();
    }
    // final method, do not override
    ngOnChanges(changes) {
        this.initializeComponent();
        if (!this.elementRef) {
            if (this.changes == null) {
                this.changes = changes;
            }
            else {
                for (const property of Object.keys(changes)) {
                    this.changes[property] = changes[property];
                }
            }
        }
        else {
            if (this.changes == null) {
                this.svyOnChanges(changes);
            }
            else {
                for (const property of Object.keys(changes)) {
                    this.changes[property] = changes[property];
                }
                this.svyOnChanges(this.changes);
                this.changes = null;
            }
        }
    }
    ngOnDestroy() {
        this.servoyApi.unRegisterComponent(this);
    }
    // our init event that is called when dom is ready
    svyOnInit() {
        this.addAttributes();
        this.componentContributor.componentCreated(this);
        this.viewStateListeners.forEach(listener => listener.afterViewInit());
    }
    // our change event that is called when dom is ready
    svyOnChanges(_changes) {
    }
    detectChanges() {
        this.cdRef.detectChanges();
    }
    /**
     * this should return the main native element (like the first div)
     */
    getNativeElement() {
        return this.elementRef ? this.elementRef.nativeElement : null;
    }
    /**
     * sub classes can return a different native child then the default main element.
     * used currently only for horizontal aligment
     */
    getNativeChild() {
        return this.elementRef.nativeElement;
    }
    getRenderer() {
        return this.renderer;
    }
    getWidth() {
        return this.getNativeElement().parentNode.parentNode.offsetWidth;
    }
    getHeight() {
        return this.getNativeElement().parentNode.parentNode.offsetHeight;
    }
    getLocationX() {
        return this.getNativeElement().parentNode.parentNode.offsetLeft;
    }
    getLocationY() {
        return this.getNativeElement().parentNode.parentNode.offsetTop;
    }
    addViewStateListener(listener) {
        this.viewStateListeners.add(listener);
    }
    removeViewStateListener(listener) {
        this.viewStateListeners.delete(listener);
    }
    initializeComponent() {
        if (!this.initialized && this.elementRef) {
            this.initialized = true;
            this.svyOnInit();
        }
    }
    addAttributes() {
        if (!this.servoyAttributes)
            return;
        for (const key of Object.keys(this.servoyAttributes)) {
            this.renderer.setAttribute(this.getNativeElement(), key, this.servoyAttributes[key]);
        }
    }
}
ServoyBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyBaseComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
ServoyBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: ServoyBaseComponent, inputs: { name: "name", servoyApi: "servoyApi", servoyAttributes: "servoyAttributes" }, viewQueries: [{ propertyName: "elementRef", first: true, predicate: ["element"], descendants: true }], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyBaseComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], servoyApi: [{
                type: Input
            }], servoyAttributes: [{
                type: Input
            }], elementRef: [{
                type: ViewChild,
                args: ['element', { static: false }]
            }] } });
export class ComponentContributor {
    componentCreated(component) {
        ComponentContributor.listeners.forEach(listener => listener.componentCreated(component));
    }
    addComponentListener(listener) {
        ComponentContributor.listeners.add(listener);
    }
}
ComponentContributor.listeners = new Set();
ComponentContributor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ComponentContributor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ComponentContributor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ComponentContributor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ComponentContributor, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,