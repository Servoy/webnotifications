import { NgModule } from '@angular/core';
import { TooltipDirective } from './tooltip/tooltip.directive';
import { TooltipService } from './tooltip/tooltip.service';
import { DecimalkeyconverterDirective } from './directives/decimalkeyconverter.directive';
import { MnemonicletterFilterPipe, NotNullOrEmptyPipe, HtmlFilterPipe, TrustAsHtmlPipe } from './format/pipes';
import { FormatFilterPipe } from './format/format.pipe';
import { EmptyValueFilterPipe } from './format/emptyvalue.pipe';
import { StartEditDirective } from './directives/startedit.directive';
import { ImageMediaIdDirective } from './directives/imagemediaid.directive';
import { AutosaveDirective } from './directives/autosave.directive';
import { UploadDirective } from './directives/upload.directive';
import { FormatDirective } from './format/formatcontrolvalueaccessor.directive';
import { FormattingService } from './format/formatting.service';
import { ComponentContributor } from './basecomponent';
import { SabloTabseq } from './directives/sablotabseq.directive';
import { WindowRefService } from './services/windowref.service';
import { SpecTypesService } from './spectypes.service';
import { LoggerFactory } from './logger.service';
import * as i0 from "@angular/core";
export class ServoyPublicModule {
}
ServoyPublicModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ServoyPublicModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicModule, declarations: [TooltipDirective,
        MnemonicletterFilterPipe,
        NotNullOrEmptyPipe,
        HtmlFilterPipe,
        FormatDirective,
        DecimalkeyconverterDirective,
        FormatFilterPipe,
        EmptyValueFilterPipe,
        StartEditDirective,
        ImageMediaIdDirective,
        AutosaveDirective,
        UploadDirective,
        SabloTabseq,
        TrustAsHtmlPipe], exports: [TooltipDirective,
        MnemonicletterFilterPipe,
        NotNullOrEmptyPipe,
        HtmlFilterPipe,
        FormatDirective,
        DecimalkeyconverterDirective,
        FormatFilterPipe,
        EmptyValueFilterPipe,
        StartEditDirective,
        ImageMediaIdDirective,
        AutosaveDirective,
        UploadDirective,
        SabloTabseq,
        TrustAsHtmlPipe] });
ServoyPublicModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicModule, providers: [TooltipService, FormattingService, ComponentContributor, SpecTypesService, WindowRefService, LoggerFactory], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TooltipDirective,
                        MnemonicletterFilterPipe,
                        NotNullOrEmptyPipe,
                        HtmlFilterPipe,
                        FormatDirective,
                        DecimalkeyconverterDirective,
                        FormatFilterPipe,
                        EmptyValueFilterPipe,
                        StartEditDirective,
                        ImageMediaIdDirective,
                        AutosaveDirective,
                        UploadDirective,
                        SabloTabseq,
                        TrustAsHtmlPipe
                    ],
                    imports: [],
                    exports: [TooltipDirective,
                        MnemonicletterFilterPipe,
                        NotNullOrEmptyPipe,
                        HtmlFilterPipe,
                        FormatDirective,
                        DecimalkeyconverterDirective,
                        FormatFilterPipe,
                        EmptyValueFilterPipe,
                        StartEditDirective,
                        ImageMediaIdDirective,
                        AutosaveDirective,
                        UploadDirective,
                        SabloTabseq,
                        TrustAsHtmlPipe
                    ],
                    providers: [TooltipService, FormattingService, ComponentContributor, SpecTypesService, WindowRefService, LoggerFactory]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vydm95X3B1YmxpYy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZXJ2b3ktcHVibGljL3NyYy9saWIvc2Vydm95X3B1YmxpYy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDMUYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBb0NqRCxNQUFNLE9BQU8sa0JBQWtCOzsrR0FBbEIsa0JBQWtCO2dIQUFsQixrQkFBa0IsaUJBakNYLGdCQUFnQjtRQUNoQix3QkFBd0I7UUFDeEIsa0JBQWtCO1FBQ2xCLGNBQWM7UUFDZCxlQUFlO1FBQ2YsNEJBQTRCO1FBQzVCLGdCQUFnQjtRQUNoQixvQkFBb0I7UUFDcEIsa0JBQWtCO1FBQ2xCLHFCQUFxQjtRQUNyQixpQkFBaUI7UUFDakIsZUFBZTtRQUNmLFdBQVc7UUFDWCxlQUFlLGFBR3JCLGdCQUFnQjtRQUNoQix3QkFBd0I7UUFDeEIsa0JBQWtCO1FBQ2xCLGNBQWM7UUFDZCxlQUFlO1FBQ2YsNEJBQTRCO1FBQzVCLGdCQUFnQjtRQUNoQixvQkFBb0I7UUFDcEIsa0JBQWtCO1FBQ2xCLHFCQUFxQjtRQUNyQixpQkFBaUI7UUFDakIsZUFBZTtRQUNmLFdBQVc7UUFDWCxlQUFlO2dIQUloQixrQkFBa0IsYUFGaEIsQ0FBRSxjQUFjLEVBQUUsaUJBQWlCLEVBQUUsb0JBQW9CLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxDQUFFLFlBaEJoSCxFQUFFOzJGQWtCRixrQkFBa0I7a0JBbEM5QixRQUFRO21CQUFDO29CQUNOLFlBQVksRUFBRSxDQUFFLGdCQUFnQjt3QkFDaEIsd0JBQXdCO3dCQUN4QixrQkFBa0I7d0JBQ2xCLGNBQWM7d0JBQ2QsZUFBZTt3QkFDZiw0QkFBNEI7d0JBQzVCLGdCQUFnQjt3QkFDaEIsb0JBQW9CO3dCQUNwQixrQkFBa0I7d0JBQ2xCLHFCQUFxQjt3QkFDckIsaUJBQWlCO3dCQUNqQixlQUFlO3dCQUNmLFdBQVc7d0JBQ1gsZUFBZTtxQkFDaEI7b0JBQ2YsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxFQUFFLENBQUMsZ0JBQWdCO3dCQUNoQix3QkFBd0I7d0JBQ3hCLGtCQUFrQjt3QkFDbEIsY0FBYzt3QkFDZCxlQUFlO3dCQUNmLDRCQUE0Qjt3QkFDNUIsZ0JBQWdCO3dCQUNoQixvQkFBb0I7d0JBQ3BCLGtCQUFrQjt3QkFDbEIscUJBQXFCO3dCQUNyQixpQkFBaUI7d0JBQ2pCLGVBQWU7d0JBQ2YsV0FBVzt3QkFDWCxlQUFlO3FCQUNmO29CQUNWLFNBQVMsRUFBRSxDQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLENBQUU7aUJBQzVIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFRvb2x0aXBEaXJlY3RpdmUgfSBmcm9tICcuL3Rvb2x0aXAvdG9vbHRpcC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUb29sdGlwU2VydmljZSB9IGZyb20gJy4vdG9vbHRpcC90b29sdGlwLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEZWNpbWFsa2V5Y29udmVydGVyRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2RlY2ltYWxrZXljb252ZXJ0ZXIuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTW5lbW9uaWNsZXR0ZXJGaWx0ZXJQaXBlLCBOb3ROdWxsT3JFbXB0eVBpcGUsIEh0bWxGaWx0ZXJQaXBlLCBUcnVzdEFzSHRtbFBpcGV9IGZyb20gJy4vZm9ybWF0L3BpcGVzJztcclxuaW1wb3J0IHsgRm9ybWF0RmlsdGVyUGlwZSB9IGZyb20gJy4vZm9ybWF0L2Zvcm1hdC5waXBlJztcclxuaW1wb3J0IHsgRW1wdHlWYWx1ZUZpbHRlclBpcGUgfSBmcm9tICcuL2Zvcm1hdC9lbXB0eXZhbHVlLnBpcGUnO1xyXG5pbXBvcnQgeyBTdGFydEVkaXREaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvc3RhcnRlZGl0LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEltYWdlTWVkaWFJZERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9pbWFnZW1lZGlhaWQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHtBdXRvc2F2ZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9hdXRvc2F2ZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBVcGxvYWREaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdXBsb2FkLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZvcm1hdERpcmVjdGl2ZSB9IGZyb20gJy4vZm9ybWF0L2Zvcm1hdGNvbnRyb2x2YWx1ZWFjY2Vzc29yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZvcm1hdHRpbmdTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtYXQvZm9ybWF0dGluZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29tcG9uZW50Q29udHJpYnV0b3IgfSBmcm9tICcuL2Jhc2Vjb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTYWJsb1RhYnNlcSB9IGZyb20gJy4vZGlyZWN0aXZlcy9zYWJsb3RhYnNlcS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBXaW5kb3dSZWZTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy93aW5kb3dyZWYuc2VydmljZSc7XHJcbmltcG9ydCB7IFNwZWNUeXBlc1NlcnZpY2UgfSBmcm9tICcuL3NwZWN0eXBlcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nZ2VyRmFjdG9yeSB9IGZyb20gJy4vbG9nZ2VyLnNlcnZpY2UnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGRlY2xhcmF0aW9uczogWyBUb29sdGlwRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgICAgIE1uZW1vbmljbGV0dGVyRmlsdGVyUGlwZSxcclxuICAgICAgICAgICAgICAgICAgICBOb3ROdWxsT3JFbXB0eVBpcGUsXHJcbiAgICAgICAgICAgICAgICAgICAgSHRtbEZpbHRlclBpcGUsXHJcbiAgICAgICAgICAgICAgICAgICAgRm9ybWF0RGlyZWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgICAgIERlY2ltYWxrZXljb252ZXJ0ZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgRm9ybWF0RmlsdGVyUGlwZSxcclxuICAgICAgICAgICAgICAgICAgICBFbXB0eVZhbHVlRmlsdGVyUGlwZSxcclxuICAgICAgICAgICAgICAgICAgICBTdGFydEVkaXREaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgSW1hZ2VNZWRpYUlkRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgICAgIEF1dG9zYXZlRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgICAgIFVwbG9hZERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgICAgICAgICBTYWJsb1RhYnNlcSxcclxuICAgICAgICAgICAgICAgICAgICBUcnVzdEFzSHRtbFBpcGVcclxuICAgICAgICAgICAgICAgICAgXSxcclxuICAgIGltcG9ydHM6IFtdLFxyXG4gICAgZXhwb3J0czogW1Rvb2x0aXBEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgTW5lbW9uaWNsZXR0ZXJGaWx0ZXJQaXBlLFxyXG4gICAgICAgICAgICAgIE5vdE51bGxPckVtcHR5UGlwZSxcclxuICAgICAgICAgICAgICBIdG1sRmlsdGVyUGlwZSxcclxuICAgICAgICAgICAgICBGb3JtYXREaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgRGVjaW1hbGtleWNvbnZlcnRlckRpcmVjdGl2ZSxcclxuICAgICAgICAgICAgICBGb3JtYXRGaWx0ZXJQaXBlLFxyXG4gICAgICAgICAgICAgIEVtcHR5VmFsdWVGaWx0ZXJQaXBlLFxyXG4gICAgICAgICAgICAgIFN0YXJ0RWRpdERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgICBJbWFnZU1lZGlhSWREaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgQXV0b3NhdmVEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgVXBsb2FkRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICAgIFNhYmxvVGFic2VxLFxyXG4gICAgICAgICAgICAgIFRydXN0QXNIdG1sUGlwZVxyXG4gICAgICAgICAgICAgXSxcclxuICAgIHByb3ZpZGVyczogWyBUb29sdGlwU2VydmljZSwgRm9ybWF0dGluZ1NlcnZpY2UsIENvbXBvbmVudENvbnRyaWJ1dG9yLCBTcGVjVHlwZXNTZXJ2aWNlLCBXaW5kb3dSZWZTZXJ2aWNlLCBMb2dnZXJGYWN0b3J5IF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFNlcnZveVB1YmxpY01vZHVsZSB7IH1cclxuIl19