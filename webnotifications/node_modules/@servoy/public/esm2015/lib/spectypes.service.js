import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./logger.service";
export class SpecTypesService {
    constructor(logFactory) {
        this.registeredTypes = new Map();
        this.log = logFactory.getLogger('SpecTypesService');
    }
    createType(name) {
        const classRef = this.registeredTypes.get(name);
        if (classRef) {
            return new classRef();
        }
        this.log.warn('returning just the basic custom object for  ' + name + ' none of the properties will be monitored');
        return new BaseCustomObject();
    }
    enhanceArrayType(array, iterableDiffers) {
        if (!instanceOfChangeAwareValue(array)) {
            array['stateHolder'] = new ArrayState(array, iterableDiffers);
            Object.defineProperty(array, 'getStateHolder', {
                enumerable: false,
                value() {
                    return this.stateHolder;
                }
            });
            Object.defineProperty(array, 'markForChanged', {
                enumerable: false,
                value() {
                    this.stateHolder.notifyChangeListener();
                }
            });
            array['stateHolder'].initDiffer();
        }
        return array;
    }
    registerType(name, classRef) {
        this.registeredTypes.set(name, classRef);
    }
    guessType(val) {
        let guess = null;
        if (instanceOfCustomArray(val)) {
            guess = 'JSON_arr';
        }
        else if (instanceOfBaseCustomObject(val)) {
            guess = 'JSON_obj';
        } // else TODO do any other types need guessing?
        //        else { // try to find it in types?
        //            this.registeredTypes.forEach(function(typeConstructorValue, typeNameKey) {
        //                if (val instanceof typeConstructorValue) guess = typeNameKey; // this wouldn't return the converter name like 'JSON_obj' but rather the actual name from spec
        //                of the custom type like "(...).tab"
        //            });
        //        }
        return guess;
    }
}
SpecTypesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: SpecTypesService, deps: [{ token: i1.LoggerFactory }], target: i0.ɵɵFactoryTarget.Injectable });
SpecTypesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: SpecTypesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: SpecTypesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.LoggerFactory }]; } });
export function isChanged(now, prev, conversionInfo) {
    if ((typeof conversionInfo === 'string' || typeof conversionInfo === 'number') && instanceOfChangeAwareValue(now)) {
        return now.getStateHolder().hasChanges();
    }
    if (now === prev)
        return false;
    if (now && prev) {
        if (now instanceof Array) {
            if (prev instanceof Array) {
                if (now.length !== prev.length)
                    return true;
            }
            else {
                return true;
            }
        }
        if (now instanceof Date) {
            if (prev instanceof Date) {
                return now.getTime() !== prev.getTime();
            }
            return true;
        }
        if ((now instanceof Object) && (prev instanceof Object)) {
            // first build up a list of all the properties both have.
            const fulllist = this.getCombinedPropertyNames(now, prev);
            for (const prop in fulllist) {
                // ng repeat creates a child scope for each element in the array any scope has a $$hashKey property which must be ignored since it is not part of the model
                if (prev[prop] !== now[prop]) {
                    if (prop === '$$hashKey')
                        continue;
                    if (typeof now[prop] === 'object') {
                        if (isChanged(now[prop], prev[prop], conversionInfo ? conversionInfo[prop] : undefined)) {
                            return true;
                        }
                    }
                    else {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    return true;
}
export const instanceOfChangeAwareValue = (obj) => obj != null && (obj).getStateHolder instanceof Function;
export const instanceOfCustomArray = (obj) => instanceOfChangeAwareValue(obj) && obj.markForChanged instanceof Function;
export const instanceOfBaseCustomObject = (obj) => instanceOfChangeAwareValue(obj) && (obj).getStateHolder() instanceof BaseCustomObjectState;
export var ChangeType;
(function (ChangeType) {
    ChangeType[ChangeType["ROWS_CHANGED"] = 0] = "ROWS_CHANGED";
    /**
     * When an INSERT happened but viewport size remained the same, it is
     * possible that some of the rows that were previously at the end of the viewport
     * slided out of it;
     * NOTE: insert signifies an insert into the client viewport, not necessarily
     * an insert in the foundset itself; for example calling "loadExtraRecordsAsync"
     * can result in an insert notification + bigger viewport size notification
     */
    ChangeType[ChangeType["ROWS_INSERTED"] = 1] = "ROWS_INSERTED";
    /**
     * When a DELETE happened inside the viewport but there were more rows available in the
     * foundset after current viewport, it is possible that some of those rows
     * slided into the viewport;
     * NOTE: delete signifies a delete from the client viewport, not necessarily
     * a delete in the foundset itself; for example calling "loadLessRecordsAsync" can
     * result in a delete notification + smaller viewport size notification
     */
    ChangeType[ChangeType["ROWS_DELETED"] = 2] = "ROWS_DELETED";
})(ChangeType || (ChangeType = {}));
export class BaseCustomObject {
    constructor() {
        this.state = new BaseCustomObjectState();
        this.state.allChanged = true;
    }
    getStateHolder() {
        return this.state;
    }
    /**
     *  subclasses can override this to give back the properties that needs to be watched.
     */
    getWatchedProperties() {
        return null;
    }
}
;
export class ChangeAwareState {
    constructor() {
        this.allChanged = false;
        this.inNotify = false;
    }
    markAllChanged(notifyListener) {
        this.allChanged = true;
        if (notifyListener)
            this.notifyChangeListener();
    }
    hasChanges() {
        return this.allChanged || this.inNotify;
    }
    setChangeListener(callback) {
        this.changeListener = callback;
    }
    notifyChangeListener() {
        this.inNotify = true;
        if (this.changeListener)
            this.changeListener();
        this.inNotify = false;
    }
}
export class BaseCustomObjectState extends ChangeAwareState {
    constructor() {
        super(...arguments);
        this.conversionInfo = {};
        this.ignoreChanges = false;
        this.change = 0;
        this.hash = BaseCustomObjectState.counter++;
        this.changedKeys = new Set();
    }
    hasChanges() {
        return super.hasChanges() || this.getChangedKeys().size > 0; // leave this as a method call as some subclasses might compute the changedKeys inside getChangedKeys()
    }
    setPropertyAndHandleChanges(_thisBaseCustoomObject, internalPropertyName, propertyName, value) {
        const oldValue = _thisBaseCustoomObject[internalPropertyName];
        // if the value of this property is changed, mark it as such and notify if needed
        this.markIfChanged(propertyName, value, oldValue);
        // unregister as listener to old value if needed
        this.setChangeListenerToSubValueIfNeeded(oldValue, undefined);
        _thisBaseCustoomObject[internalPropertyName] = value;
        // register as listener to new value if needed
        this.setChangeListenerToSubValueIfNeeded(value, () => {
            this.markIfChanged(propertyName, value, value);
        });
        // this value has changed by reference; so it needs to be fully sent to server - except for when it now arrived from the server and is being set (in which case ignoreChanges is true)
        if (!this.ignoreChanges && instanceOfChangeAwareValue(value))
            value.getStateHolder().markAllChanged(false);
    }
    getChangedKeys() {
        return this.changedKeys;
    }
    clearChanges() {
        this.changedKeys.clear();
        this.allChanged = false;
    }
    getHashKey() {
        return this.hash + '_' + this.change;
    }
    markIfChanged(propertyName, newObject, oldObject) {
        if (this.testChanged(propertyName, newObject, oldObject)) {
            this.pushChange(propertyName);
            return true;
        }
        return false;
    }
    setChangeListenerToSubValueIfNeeded(value, changeListener) {
        if (instanceOfChangeAwareValue(value)) {
            // child is able to handle it's own change mechanism
            value.getStateHolder().setChangeListener(changeListener);
        }
    }
    pushChange(propertyName) {
        if (this.ignoreChanges)
            return;
        if (this.changedKeys.size === 0)
            this.change++;
        if (!this.changedKeys.has(propertyName)) {
            this.changedKeys.add(propertyName);
            this.notifyChangeListener();
        }
    }
    testChanged(propertyName, newObject, oldObject) {
        if (newObject !== oldObject)
            return true;
        if (typeof newObject == 'object') {
            if (instanceOfChangeAwareValue(newObject)) {
                return newObject.getStateHolder().hasChanges();
            }
            else {
                return isChanged(newObject, oldObject, this.conversionInfo[propertyName]);
            }
        }
        return false;
    }
}
// provide a hash that lets arrays that contain custom objects know that the object has changed or not
BaseCustomObjectState.counter = 0;
export class ArrayState extends BaseCustomObjectState {
    constructor(array, iterableDiffers) {
        super();
        this.array = array;
        this.iterableDiffers = iterableDiffers;
        this.allChanged = true;
    }
    initDiffer() {
        this.differ = this.iterableDiffers.find(this.array).create((index, item) => {
            if (instanceOfBaseCustomObject(item)) {
                return item.getStateHolder().getHashKey();
            }
            return item;
        });
        this.differ.diff(this.array);
    }
    clearChanges() {
        super.clearChanges();
        this.initDiffer();
    }
    getChangedKeys() {
        let changes = super.getChangedKeys();
        const arrayChanges = this.differ.diff(this.array);
        if (arrayChanges) {
            let addedOrRemoved = 0;
            arrayChanges.forEachAddedItem((record) => {
                addedOrRemoved++;
                changes.add(record.currentIndex);
            });
            arrayChanges.forEachRemovedItem((record) => {
                addedOrRemoved--;
                changes.add(record.previousIndex);
            });
            arrayChanges.forEachMovedItem((record) => {
                if (instanceOfChangeAwareValue(record.item)) {
                    return record.item.getStateHolder().markAllChanged(false);
                }
            });
            if (addedOrRemoved !== 0) {
                // size changed, for now send whole array
                this.markAllChanged(false);
            }
            else {
                const changesArray = Array.from(changes);
                changesArray.sort((a, b) => a - b);
                changes = new Set(changesArray);
            }
        }
        return changes;
    }
}
;
//# sourceMappingURL=data:application/json;base64,