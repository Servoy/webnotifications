import { WindowRefService } from './services/windowref.service';
import * as i0 from "@angular/core";
export declare enum LogLevel {
    ERROR = 1,
    WARN = 2,
    INFO = 3,
    DEBUG = 4,
    SPAM = 5
}
export declare class LogConfiguration {
    isDebugMode: boolean;
    level: LogLevel;
    constructor(isDebugMode?: boolean, level?: LogLevel);
}
declare global {
    interface Window {
        svyLogConfiguration: LogConfiguration;
        logFactory: LoggerFactory;
        logLevels: {
            [property: string]: LogLevel;
        };
        console: Console;
    }
}
export declare class LoggerService {
    private svyLogConfiguration;
    private className;
    private console;
    private enabled;
    constructor(windowRefService: WindowRefService, svyLogConfiguration: LogConfiguration, className: string);
    buildMessage(message: string | (() => string)): string;
    get spam(): any;
    get debug(): any;
    get info(): any;
    get warn(): any;
    get error(): any;
    toggleDebugMode(): boolean;
    get logLevel(): LogLevel;
    set logLevel(level: LogLevel);
    private getTime;
}
export declare class LoggerFactory {
    private windowRefService;
    private instances;
    private defaultLogConfiguration;
    constructor(windowRefService: WindowRefService);
    getLogger(cls: any): LoggerService;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoggerFactory, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LoggerFactory>;
}
