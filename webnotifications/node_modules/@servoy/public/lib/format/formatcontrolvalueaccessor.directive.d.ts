import { Renderer2, ElementRef, AfterViewInit, OnChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Format, FormattingService } from './formatting.service';
import { LoggerFactory } from '../logger.service';
import * as i0 from "@angular/core";
export declare class FormatDirective implements ControlValueAccessor, AfterViewInit, OnChanges {
    private _renderer;
    private _elementRef;
    private formatService;
    private doc;
    private static DATETIMEFORMAT;
    private static DATEFORMAT;
    private static MONTHFORMAT;
    private static WEEKFORMAT;
    private static TIMEFORMAT;
    private static BROWSERNUMBERFORMAT;
    format: Format;
    findmode: boolean;
    private hasFocus;
    private realValue;
    private isKeyPressEventFired;
    private oldInputValue;
    private listeners;
    private readonly log;
    constructor(_renderer: Renderer2, _elementRef: ElementRef, formatService: FormattingService, doc: Document, logFactory: LoggerFactory);
    touched(): void;
    focussed(): void;
    input(value: any): void;
    onChangeCallback: (_: any) => void;
    onTouchedCallback: () => void;
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    private getType;
    private setFormat;
    private upperOrLowerCase;
    private inputFiredForNumbersCheck;
    private findDelta;
    private getNumbersFromString;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormatDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FormatDirective, "[svyFormat]", never, { "format": "svyFormat"; "findmode": "findmode"; }, {}, never>;
}
