import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class MnemonicletterFilterPipe {
    transform(input, letter) {
        if (letter && input)
            return input.replace(letter, '<u>' + letter + '</u>');
        return input;
    }
}
MnemonicletterFilterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: MnemonicletterFilterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
MnemonicletterFilterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: MnemonicletterFilterPipe, name: "mnemonicletterFilter" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: MnemonicletterFilterPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'mnemonicletterFilter' }]
        }] });
export class NotNullOrEmptyPipe {
    transform(value, _args) {
        if (value)
            return value.filter(a => a && (a.realValue || a.displayValue));
        return value;
    }
}
NotNullOrEmptyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NotNullOrEmptyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
NotNullOrEmptyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NotNullOrEmptyPipe, name: "notNullOrEmpty" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NotNullOrEmptyPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'notNullOrEmpty' }]
        }] });
export class HtmlFilterPipe {
    transform(input) {
        if (input && input.indexOf && input.indexOf('<body') >= 0 && input.lastIndexOf('</body') >= 0) {
            input = input.substring(input.indexOf('<body') + 6, input.lastIndexOf('</body'));
        }
        return input;
    }
}
HtmlFilterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: HtmlFilterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
HtmlFilterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: HtmlFilterPipe, name: "htmlFilter" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: HtmlFilterPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'htmlFilter' }]
        }] });
export class TrustAsHtmlPipe {
    constructor(domSanitizer) {
        this.domSanitizer = domSanitizer;
    }
    transform(input, trustAsHtml) {
        if (trustAsHtml) {
            return this.domSanitizer.bypassSecurityTrustHtml(input);
        }
        return input;
    }
}
TrustAsHtmlPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: TrustAsHtmlPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });
TrustAsHtmlPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: TrustAsHtmlPipe, name: "trustAsHtml" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: TrustAsHtmlPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'trustAsHtml' }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZXJ2b3ktcHVibGljL3NyYy9saWIvZm9ybWF0L3BpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOzs7QUFLcEQsTUFBTSxPQUFPLHdCQUF3QjtJQUNqQyxTQUFTLENBQUUsS0FBYSxFQUFFLE1BQWM7UUFDcEMsSUFBRyxNQUFNLElBQUksS0FBSztZQUFFLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFDLE1BQU0sR0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RSxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOztxSEFKUSx3QkFBd0I7bUhBQXhCLHdCQUF3QjsyRkFBeEIsd0JBQXdCO2tCQURwQyxJQUFJO21CQUFFLEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFOztBQVF2QyxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFNBQVMsQ0FBQyxLQUFZLEVBQUUsS0FBVztRQUMvQixJQUFHLEtBQUs7WUFDTixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OytHQUxVLGtCQUFrQjs2R0FBbEIsa0JBQWtCOzJGQUFsQixrQkFBa0I7a0JBRDlCLElBQUk7bUJBQUMsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUM7O0FBVTlCLE1BQU0sT0FBTyxjQUFjO0lBQ3ZCLFNBQVMsQ0FBRSxLQUFhO1FBQ3RCLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBRyxDQUFDLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBRyxDQUFDLEVBQUU7WUFDM0YsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQy9FO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzsyR0FOUSxjQUFjO3lHQUFkLGNBQWM7MkZBQWQsY0FBYztrQkFEMUIsSUFBSTttQkFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7O0FBVzdCLE1BQU0sT0FBTyxlQUFlO0lBQ3hCLFlBQXFCLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQy9DLENBQUM7SUFFRCxTQUFTLENBQUUsS0FBYSxFQUFFLFdBQW9CO1FBQzFDLElBQUssV0FBVyxFQUFHO1lBQ2YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7NEdBVFEsZUFBZTswR0FBZixlQUFlOzJGQUFmLGVBQWU7a0JBRDNCLElBQUk7bUJBQUUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHtQcm9wZXJ0eVV0aWxzfSBmcm9tICcuLi91dGlscy9wcm9wZXJ0eV91dGlscyc7XHJcblxyXG5AUGlwZSggeyBuYW1lOiAnbW5lbW9uaWNsZXR0ZXJGaWx0ZXInIH0gKVxyXG5leHBvcnQgY2xhc3MgTW5lbW9uaWNsZXR0ZXJGaWx0ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgICB0cmFuc2Zvcm0oIGlucHV0OiBzdHJpbmcsIGxldHRlcjogc3RyaW5nKTogc3RyaW5ne1xyXG4gICAgICAgIGlmKGxldHRlciAmJiBpbnB1dCkgcmV0dXJuIGlucHV0LnJlcGxhY2UobGV0dGVyLCAnPHU+JytsZXR0ZXIrJzwvdT4nKTtcclxuICAgICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcbn1cclxuQFBpcGUoe25hbWU6ICdub3ROdWxsT3JFbXB0eSd9KVxyXG5leHBvcnQgY2xhc3MgTm90TnVsbE9yRW1wdHlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKHZhbHVlOiBhbnlbXSwgX2FyZ3M/OiBhbnkpOiBhbnkge1xyXG4gICAgICBpZih2YWx1ZSlcclxuICAgICAgICByZXR1cm4gdmFsdWUuZmlsdGVyKGEgPT4gYSAmJiAoYS5yZWFsVmFsdWUgfHxhLmRpc3BsYXlWYWx1ZSkpO1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSggeyBuYW1lOiAnaHRtbEZpbHRlcicgfSApXHJcbmV4cG9ydCBjbGFzcyBIdG1sRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgdHJhbnNmb3JtKCBpbnB1dDogc3RyaW5nKTogc3RyaW5ne1xyXG4gICAgICBpZiAoaW5wdXQgJiYgaW5wdXQuaW5kZXhPZiAmJiBpbnB1dC5pbmRleE9mKCc8Ym9keScpID49MCAmJiBpbnB1dC5sYXN0SW5kZXhPZignPC9ib2R5JykgPj0wKSB7XHJcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5zdWJzdHJpbmcoaW5wdXQuaW5kZXhPZignPGJvZHknKSs2LGlucHV0Lmxhc3RJbmRleE9mKCc8L2JvZHknKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG59XG5cclxuQFBpcGUoIHsgbmFtZTogJ3RydXN0QXNIdG1sJyB9IClcclxuZXhwb3J0IGNsYXNzIFRydXN0QXNIdG1sUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgY29uc3RydWN0b3IoIHByaXZhdGUgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtKCBpbnB1dDogc3RyaW5nLCB0cnVzdEFzSHRtbDogYm9vbGVhbiApOiBhbnkge1xyXG4gICAgICAgIGlmICggdHJ1c3RBc0h0bWwgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxufVxyXG4iXX0=