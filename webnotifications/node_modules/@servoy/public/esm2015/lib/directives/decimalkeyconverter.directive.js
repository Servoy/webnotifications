import { Directive, Input, HostListener } from '@angular/core';
import { getLocaleNumberSymbol, NumberSymbol } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../services/servoy_public.service";
export class DecimalkeyconverterDirective {
    constructor(el, servoyService) {
        this.el = el;
        this.servoyService = servoyService;
        this.element = el.nativeElement;
    }
    onKeypress(e) {
        if (e.which === 110 && this.svyFormat && this.svyFormat.type === 'NUMBER') {
            const caretPos = this.element.selectionStart;
            const startString = this.element.value.slice(0, caretPos);
            const endString = this.element.value.slice(this.element.selectionEnd, this.element.value.length);
            this.element.value = (startString + getLocaleNumberSymbol(this.servoyService.getLocale(), NumberSymbol.Decimal) + endString);
            this.element.focus();
            this.element.setSelectionRange(caretPos + 1, caretPos + 1);
            if (e.preventDefault)
                e.preventDefault();
        }
    }
}
DecimalkeyconverterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: DecimalkeyconverterDirective, deps: [{ token: i0.ElementRef }, { token: i1.ServoyPublicService }], target: i0.ɵɵFactoryTarget.Directive });
DecimalkeyconverterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: DecimalkeyconverterDirective, selector: "[svyDecimalKeyConverter]", inputs: { svyFormat: ["svyDecimalKeyConverter", "svyFormat"] }, host: { listeners: { "keydown": "onKeypress($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: DecimalkeyconverterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[svyDecimalKeyConverter]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.ServoyPublicService }]; }, propDecorators: { svyFormat: [{
                type: Input,
                args: ['svyDecimalKeyConverter']
            }], onKeypress: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbGtleWNvbnZlcnRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZXJ2b3ktcHVibGljL3NyYy9saWIvZGlyZWN0aXZlcy9kZWNpbWFsa2V5Y29udmVydGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFHLEtBQUssRUFBZSxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFPdEUsTUFBTSxPQUFPLDRCQUE0QjtJQUt2QyxZQUEyQixFQUFjLEVBQVUsYUFBa0M7UUFBMUQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFxQjtRQUNqRixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDcEMsQ0FBQztJQUVvQyxVQUFVLENBQUMsQ0FBZ0I7UUFDNUQsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUN2RSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztZQUM3QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzFELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUM3SCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLENBQUMsY0FBYztnQkFBRSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDNUM7SUFDTCxDQUFDOzt5SEFuQlUsNEJBQTRCOzZHQUE1Qiw0QkFBNEI7MkZBQTVCLDRCQUE0QjtrQkFIeEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMEJBQTBCO2lCQUNyQzttSUFHa0MsU0FBUztzQkFBekMsS0FBSzt1QkFBQyx3QkFBd0I7Z0JBT00sVUFBVTtzQkFBOUMsWUFBWTt1QkFBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUgLCBJbnB1dCAsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXRMb2NhbGVOdW1iZXJTeW1ib2wsIE51bWJlclN5bWJvbCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBTZXJ2b3lQdWJsaWNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc2Vydm95X3B1YmxpYy5zZXJ2aWNlJztcbmltcG9ydCB7IEZvcm1hdCB9IGZyb20gJy4uL2Zvcm1hdC9mb3JtYXR0aW5nLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc3Z5RGVjaW1hbEtleUNvbnZlcnRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIERlY2ltYWxrZXljb252ZXJ0ZXJEaXJlY3RpdmUge1xuXG4gIEBJbnB1dCgnc3Z5RGVjaW1hbEtleUNvbnZlcnRlcicpIHN2eUZvcm1hdDogRm9ybWF0O1xuICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgc2Vydm95U2VydmljZTogU2Vydm95UHVibGljU2VydmljZSkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKSBvbktleXByZXNzKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgIGlmIChlLndoaWNoID09PSAxMTAgJiYgdGhpcy5zdnlGb3JtYXQgJiYgdGhpcy5zdnlGb3JtYXQudHlwZSA9PT0gJ05VTUJFUicpIHtcbiAgICAgICAgICBjb25zdCBjYXJldFBvcyA9IHRoaXMuZWxlbWVudC5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICBjb25zdCBzdGFydFN0cmluZyA9IHRoaXMuZWxlbWVudC52YWx1ZS5zbGljZSgwLCBjYXJldFBvcyk7XG4gICAgICAgICAgY29uc3QgZW5kU3RyaW5nID0gdGhpcy5lbGVtZW50LnZhbHVlLnNsaWNlKHRoaXMuZWxlbWVudC5zZWxlY3Rpb25FbmQsIHRoaXMuZWxlbWVudC52YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IChzdGFydFN0cmluZyArIGdldExvY2FsZU51bWJlclN5bWJvbCh0aGlzLnNlcnZveVNlcnZpY2UuZ2V0TG9jYWxlKCksIE51bWJlclN5bWJvbC5EZWNpbWFsKSArIGVuZFN0cmluZyk7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKGNhcmV0UG9zICsgMSwgY2FyZXRQb3MgKyAxKTtcbiAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICB9XG59XG4iXX0=