import { Injectable, NgModule } from '@angular/core';
import { JSEvent } from '../jsevent';
import { ServoyPublicService } from '../services/servoy_public.service';
import { ServoyPublicModule } from '../servoy_public.module';
import * as i0 from "@angular/core";
export class ServoyPublicServiceTestingImpl extends ServoyPublicService {
    constructor() {
        super(...arguments);
        this.messages = {};
        this.forms = {};
    }
    addForm(name, formCache) {
        this.forms[name] = formCache;
    }
    getFormCacheByName(containedForm) {
        if (this.forms[containedForm])
            return this.forms[containedForm];
        const form = {
            absolute: true,
            size: { width: 100, height: 100 },
            getComponent: (name) => {
                const comp = {
                    name,
                    model: {}
                };
                return comp;
            }
        };
        return form;
    }
    generateServiceUploadUrl(serviceName, apiFunctionName) {
        return 'resources/upload/1/svy_services/' + serviceName + '/' + apiFunctionName;
    }
    generateUploadUrl(formname, componentName, propertyName) {
        return 'resources/upload/1' +
            (formname ? '/' + formname : '') +
            (componentName ? '/' + componentName : '') +
            (propertyName ? '/' + propertyName : '');
    }
    executeInlineScript(formname, script, params) {
        throw new Error('Method not implemented.');
    }
    addMessage(key, message) {
        this.messages[key] = message;
    }
    getI18NMessages(...keys) {
        const resolvedMessages = {};
        keys.forEach(key => resolvedMessages[key] = this.messages[key] ? this.messages[key] : '');
        return Promise.resolve(resolvedMessages);
    }
    callService(serviceName, methodName, argsObject, async) {
        throw new Error('Method not implemented.');
    }
    setLocale(locale) {
        this.locale = locale;
    }
    getLocale() {
        return this.locale ? this.locale : 'en';
    }
    createJSEvent(event, eventType, contextFilter, contextFilterElement) {
        const ev = new JSEvent();
        ev.eventType = eventType;
        ev.svyType = eventType;
        ev.formName = 'test';
        ev.elementName = 'test';
        ev.timestamp = new Date().getTime();
        return ev;
    }
    showFileOpenDialog(title, multiselect, acceptFilter, url) {
        throw new Error('Method not implemented.');
    }
}
ServoyPublicServiceTestingImpl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicServiceTestingImpl, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
ServoyPublicServiceTestingImpl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicServiceTestingImpl });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicServiceTestingImpl, decorators: [{
            type: Injectable
        }] });
export class ServoyPublicTestingModule {
}
ServoyPublicTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ServoyPublicTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicTestingModule, imports: [ServoyPublicModule], exports: [ServoyPublicModule] });
ServoyPublicTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicTestingModule, providers: [
        ServoyPublicServiceTestingImpl, { provide: ServoyPublicService, useExisting: ServoyPublicServiceTestingImpl }
    ], imports: [[
            ServoyPublicModule
        ], ServoyPublicModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: ServoyPublicTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [
                        ServoyPublicModule
                    ],
                    exports: [
                        ServoyPublicModule
                    ],
                    providers: [
                        ServoyPublicServiceTestingImpl, { provide: ServoyPublicService, useExisting: ServoyPublicServiceTestingImpl }
                    ],
                    schemas: []
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,