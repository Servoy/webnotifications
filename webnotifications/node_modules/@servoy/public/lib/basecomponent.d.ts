import { OnInit, AfterViewInit, OnChanges, SimpleChanges, Renderer2, ElementRef, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { ServoyApi } from './servoy_api';
import * as i0 from "@angular/core";
export declare class ServoyBaseComponent<T extends HTMLElement> implements AfterViewInit, OnInit, OnChanges, OnDestroy {
    protected readonly renderer: Renderer2;
    protected cdRef: ChangeDetectorRef;
    name: string;
    servoyApi: ServoyApi;
    servoyAttributes: {
        [property: string]: string;
    };
    elementRef: ElementRef<T>;
    private viewStateListeners;
    private componentContributor;
    private initialized;
    private changes;
    constructor(renderer: Renderer2, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    svyOnInit(): void;
    svyOnChanges(_changes: SimpleChanges): void;
    detectChanges(): void;
    /**
     * this should return the main native element (like the first div)
     */
    getNativeElement(): T;
    /**
     * sub classes can return a different native child then the default main element.
     * used currently only for horizontal aligment
     */
    getNativeChild(): any;
    getRenderer(): Renderer2;
    getWidth(): number;
    getHeight(): number;
    getLocationX(): number;
    getLocationY(): number;
    addViewStateListener(listener: IViewStateListener): void;
    removeViewStateListener(listener: IViewStateListener): void;
    protected initializeComponent(): void;
    protected addAttributes(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ServoyBaseComponent<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ServoyBaseComponent<any>, never, never, { "name": "name"; "servoyApi": "servoyApi"; "servoyAttributes": "servoyAttributes"; }, {}, never>;
}
export interface IViewStateListener {
    afterViewInit(): void;
}
export declare class ComponentContributor {
    private static listeners;
    componentCreated(component: ServoyBaseComponent<any>): void;
    addComponentListener(listener: IComponentContributorListener): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ComponentContributor, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ComponentContributor>;
}
export interface IComponentContributorListener {
    componentCreated(component: ServoyBaseComponent<any>): void;
}
