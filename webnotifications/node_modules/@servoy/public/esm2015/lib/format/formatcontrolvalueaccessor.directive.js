import { Directive, Input, HostListener, forwardRef, Inject } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MaskFormat } from './maskformat';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./formatting.service";
import * as i2 from "../logger.service";
class NumberParser {
    constructor() {
        const locale = new Intl.NumberFormat().resolvedOptions().locale;
        const parts = new Intl.NumberFormat(locale).formatToParts(12345.6);
        const numerals = [...new Intl.NumberFormat(locale, { useGrouping: false }).format(9876543210)].reverse();
        const index = new Map(numerals.map((d, i) => [d, i]));
        this._group = new RegExp(`[${parts.find(d => d.type === 'group').value}]`, 'g');
        this._decimal = new RegExp(`[${parts.find(d => d.type === 'decimal').value}]`);
        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');
        this._index = d => index.get(d).toString();
    }
    parse(str) {
        return (str.trim().replace(this._group, '').replace(this._decimal, '.').replace(this._numeral, this._index)) ? +str : NaN;
    }
}
export class FormatDirective {
    constructor(_renderer, _elementRef, formatService, doc, logFactory) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.formatService = formatService;
        this.doc = doc;
        this.hasFocus = false;
        this.realValue = null;
        this.isKeyPressEventFired = false;
        this.oldInputValue = null;
        this.listeners = [];
        this.onChangeCallback = (_) => { };
        this.onTouchedCallback = () => { };
        this.log = logFactory.getLogger('formatdirective');
    }
    touched() {
        this.onTouchedCallback();
        this.hasFocus = false;
        if (this.format.display && this.format.edit && this.format.edit !== this.format.display) {
            this.writeValue(this.realValue);
        }
    }
    focussed() {
        this.hasFocus = true;
        if (this.format.display && this.format.edit && this.format.edit !== this.format.display) {
            this.writeValue(this.realValue);
        }
    }
    input(value) {
        let data = value;
        const inputType = this.getType();
        if (inputType === 'datetime-local') {
            data = this.formatService.unformat(value, FormatDirective.DATETIMEFORMAT.display, FormatDirective.DATETIMEFORMAT.type, this.realValue);
        }
        else if (inputType === 'date') {
            data = this.formatService.unformat(value, FormatDirective.DATEFORMAT.display, FormatDirective.DATEFORMAT.type, this.realValue);
        }
        else if (inputType === 'time') {
            data = this.formatService.unformat(value, FormatDirective.TIMEFORMAT.display, FormatDirective.TIMEFORMAT.type, this.realValue);
        }
        else if (inputType === 'month') {
            data = this.formatService.unformat(value, FormatDirective.MONTHFORMAT.display, FormatDirective.MONTHFORMAT.type, this.realValue);
        }
        else if (inputType === 'week') {
            data = this.formatService.unformat(value, FormatDirective.WEEKFORMAT.display, FormatDirective.WEEKFORMAT.type, this.realValue);
        }
        else if (inputType === 'number') {
            data = FormatDirective.BROWSERNUMBERFORMAT.parse(value);
        }
        else if (inputType === 'email') {
            data = value;
        }
        else if (!this.findmode && this.format) {
            const type = this.format.type;
            let format = this.format.display ? this.format.display : this.format.edit;
            if (this.hasFocus && this.format.edit && !this.format.isMask)
                format = this.format.edit;
            try {
                data = this.formatService.unformat(data, format, type, this.realValue);
            }
            catch (e) {
                this.log.error(e);
                //TODO set error state
            }
            if (this.format.type === 'TEXT' && this.format.isRaw && this.format.isMask) {
                if (data && format && data.length === format.length) {
                    let ret = '';
                    for (let i = 0; i < format.length; i++) {
                        switch (format[i]) {
                            case 'U':
                            case 'L':
                            case 'A':
                            case '?':
                            case '*':
                            case 'H':
                            case '#':
                                ret += data[i];
                                break;
                            default:
                                // ignore literal characters
                                break;
                        }
                    }
                    data = ret;
                }
            }
        }
        this.realValue = data;
        this.onChangeCallback(data);
    }
    ngAfterViewInit() {
        this.setFormat();
    }
    ngOnChanges() {
        this.setFormat();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    writeValue(value) {
        this.realValue = value;
        const inputType = this.getType();
        if (inputType === 'datetime-local') {
            const data = this.formatService.format(value, FormatDirective.DATETIMEFORMAT, false);
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', data);
        }
        else if (inputType === 'date') {
            const data = this.formatService.format(value, FormatDirective.DATEFORMAT, false);
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', data);
        }
        else if (inputType === 'time') {
            const data = this.formatService.format(value, FormatDirective.TIMEFORMAT, false);
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', data);
        }
        else if (inputType === 'month') {
            const data = this.formatService.format(value, FormatDirective.MONTHFORMAT, false);
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', data);
        }
        else if (inputType === 'week') {
            const data = this.formatService.format(value, FormatDirective.WEEKFORMAT, false);
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', data);
        }
        else if (inputType === 'number') {
            const data = value ? new Intl.NumberFormat().format(value) : '';
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', data);
        }
        else if (inputType === 'email') {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);
        }
        else if (value && this.format) {
            let data = value;
            if (!this.findmode) {
                data = inputType === 'number' && data.toString().length >= this.format.maxLength ? data.toString().substring(0, this.format.maxLength) : data;
                let useEdit = !this.format.display;
                if (this.format.edit && !this.format.isMask && this.hasFocus)
                    useEdit = true;
                try {
                    data = this.formatService.format(data, this.format, useEdit);
                }
                catch (e) {
                    this.log.error(e);
                }
                if (data && this.format.type === 'TEXT') {
                    if (this.format.uppercase)
                        data = data.toUpperCase();
                    else if (this.format.lowercase)
                        data = data.toLowerCase();
                }
            }
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', data);
        }
        else {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', value ? value : '');
        }
    }
    getType() {
        const type = this._elementRef.nativeElement.type;
        return type ? type.toLocaleLowerCase() : 'text';
    }
    setFormat() {
        this.listeners.forEach(lFn => lFn());
        this.listeners = [];
        if (this.format) {
            if (!this.findmode && (this.format.uppercase || this.format.lowercase)) {
                this.listeners.push(this._renderer.listen(this._elementRef.nativeElement, 'input', () => this.upperOrLowerCase()));
            }
            if (this.format.isNumberValidator || this.format.type === 'NUMBER' || this.format.type === 'INTEGER') {
                this.listeners.push(this._renderer.listen(this._elementRef.nativeElement, 'keypress', (event) => {
                    this.isKeyPressEventFired = true;
                    return this.formatService.testForNumbersOnly(event, null, this._elementRef.nativeElement, this.findmode, true, this.format, false);
                }));
                this.listeners.push(this._renderer.listen(this._elementRef.nativeElement, 'input', (event) => this.inputFiredForNumbersCheck(event)));
            }
            if (this.format.maxLength) {
                if (!this.findmode) {
                    this._renderer.setAttribute(this._elementRef.nativeElement, 'maxlength', this.format.maxLength + '');
                }
                else {
                    this._renderer.removeAttribute(this._elementRef.nativeElement, 'maxlength');
                }
            }
            if (!this.findmode && this.format.isMask) {
                new MaskFormat(this.format, this._renderer, this._elementRef.nativeElement, this.formatService, this.doc);
            }
            this.writeValue(this.realValue);
        }
    }
    // lower and upper case handling
    upperOrLowerCase() {
        const element = this._elementRef.nativeElement;
        const caretPos = element.selectionStart;
        element.value = this.format.uppercase ? element.value.toUpperCase() : element.value.toLowerCase();
        element.setSelectionRange(caretPos, caretPos);
    }
    inputFiredForNumbersCheck(event) {
        let currentValue = this._elementRef.nativeElement.value;
        if (!this.isKeyPressEventFired && event.target.tagName.toUpperCase() === 'INPUT') {
            // get inserted chars
            const inserted = this.findDelta(currentValue, this.oldInputValue);
            // get removed chars
            const removed = this.findDelta(this.oldInputValue, currentValue);
            // determine if user pasted content
            const pasted = inserted.length > 1 || (!inserted && !removed);
            if (!pasted && !removed) {
                if (!this.formatService.testForNumbersOnly(event, inserted, this._elementRef.nativeElement, this.findmode, true, this.format, true)) {
                    currentValue = this.oldInputValue;
                }
            }
            //If number validator, check all chars in string and extract only the valid chars.
            if (event.target.type.toUpperCase() === 'NUMBER' || this.format.type === 'NUMBER' || this.format.type === 'INTEGER' || this.format.isNumberValidator) {
                currentValue = this.getNumbersFromString(event, currentValue, this.oldInputValue);
            }
            if (currentValue !== this._elementRef.nativeElement.value) {
                this._elementRef.nativeElement.value = currentValue;
                // // detect IE8 and above, and Edge; call on change manually because of https://bugs.jquery.com/ticket/10818
                // if (/MSIE/.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge/.test(navigator.userAgent)) {
                // 	var changeOnBlurForIE = function() {
                // 		 element.change();
                // 		 element.off("blur", callChangeOnBlur);
                // 	 }
                // 	 element.on("blur", changeOnBlurForIE);
                // }
            }
            this.oldInputValue = currentValue;
            this.isKeyPressEventFired = false;
        }
        if (this.isKeyPressEventFired) {
            this.oldInputValue = currentValue;
            this.isKeyPressEventFired = false;
        }
    }
    findDelta(value, prevValue) {
        let delta = '';
        if (typeof value === 'string' && typeof prevValue === 'string' && value.length >= prevValue.length) {
            for (let i = 0; i < value.length; i++) {
                const str = value.substr(0, i) + value.substr(i + value.length - prevValue.length);
                if (str === prevValue) {
                    delta = value.substr(i, value.length - prevValue.length);
                    break;
                }
            }
        }
        return delta;
    }
    getNumbersFromString(e, currentValue, oldInputValue) {
        if (oldInputValue === currentValue) {
            return currentValue;
        }
        let stripped = '';
        for (let i = 0; i < currentValue.length; i++) {
            if (this.formatService.testForNumbersOnly(e, currentValue.charAt(i), this._elementRef.nativeElement, this.findmode, true, this.format, true)) {
                stripped = stripped + currentValue.charAt(i);
                if (stripped.length === this.format.maxLength)
                    break;
            }
        }
        return stripped;
    }
}
FormatDirective.DATETIMEFORMAT = { display: 'yyyy-MM-ddTHH:mm:ss', type: 'DATETIME' };
FormatDirective.DATEFORMAT = { display: 'yyyy-MM-dd', type: 'DATETIME' };
FormatDirective.MONTHFORMAT = { display: 'yyyy-MM', type: 'DATETIME' };
FormatDirective.WEEKFORMAT = { display: 'YYYY-[W]WW', type: 'DATETIME' };
FormatDirective.TIMEFORMAT = { display: 'HH:mm', type: 'DATETIME' };
FormatDirective.BROWSERNUMBERFORMAT = new NumberParser();
FormatDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: FormatDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i1.FormattingService }, { token: DOCUMENT }, { token: i2.LoggerFactory }], target: i0.ɵɵFactoryTarget.Directive });
FormatDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: FormatDirective, selector: "[svyFormat]", inputs: { format: ["svyFormat", "format"], findmode: "findmode" }, host: { listeners: { "blur": "touched()", "focus": "focussed()", "change": "input($event.target.value)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => FormatDirective),
            multi: true
        }], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: FormatDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[svyFormat]',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => FormatDirective),
                            multi: true
                        }]
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i1.FormattingService }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i2.LoggerFactory }]; }, propDecorators: { format: [{
                type: Input,
                args: ['svyFormat']
            }], findmode: [{
                type: Input
            }], touched: [{
                type: HostListener,
                args: ['blur', []]
            }], focussed: [{
                type: HostListener,
                args: ['focus', []]
            }], input: [{
                type: HostListener,
                args: ['change', ['$event.target.value']]
            }] } });
//# sourceMappingURL=data:application/json;base64,