import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./services/windowref.service";
// log levels for when debugEnabled(true) is called - if that is false, these levels are irrelevant
// any custom debug levels can be used as well - these are just stored here so that custom code can test the level and see if it should log its message
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 1] = "ERROR";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["INFO"] = 3] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 4] = "DEBUG";
    LogLevel[LogLevel["SPAM"] = 5] = "SPAM";
})(LogLevel || (LogLevel = {}));
export class LogConfiguration {
    constructor(isDebugMode = false, level = LogLevel.WARN) {
        this.isDebugMode = isDebugMode;
        this.level = level;
    }
}
const noop = () => undefined;
export class LoggerService {
    constructor(windowRefService, svyLogConfiguration, className) {
        this.svyLogConfiguration = svyLogConfiguration;
        this.className = className;
        this.enabled = false;
        this.console = windowRefService.nativeWindow.console;
    }
    buildMessage(message) {
        if (this.enabled) {
            return message instanceof Function ? message() : message;
        }
    }
    get spam() {
        if (this.svyLogConfiguration.level >= LogLevel.SPAM) {
            this.enabled = true;
            return this.console.debug.bind(this.console, this.getTime() + ' SPAM ' + this.className + ' - ');
        }
        this.enabled = false;
        return noop;
    }
    get debug() {
        if (this.svyLogConfiguration.isDebugMode || this.svyLogConfiguration.level >= LogLevel.DEBUG) {
            this.enabled = true;
            return this.console.debug.bind(this.console, this.getTime() + ' DEBUG ' + this.className + ' - ');
        }
        this.enabled = false;
        return noop;
    }
    get info() {
        if (this.svyLogConfiguration.isDebugMode || this.svyLogConfiguration.level >= LogLevel.INFO) {
            this.enabled = true;
            return this.console.info.bind(this.console, this.getTime() + ' INFO ' + this.className + ' - ');
        }
        this.enabled = false;
        return noop;
    }
    get warn() {
        if (this.svyLogConfiguration.isDebugMode || this.svyLogConfiguration.level >= LogLevel.WARN) {
            this.enabled = true;
            return this.console.warn.bind(this.console, this.getTime() + ' WARN ' + this.className + ' - ');
        }
        this.enabled = false;
        return noop;
    }
    get error() {
        if (this.svyLogConfiguration.isDebugMode || this.svyLogConfiguration.level >= LogLevel.ERROR) {
            this.enabled = true;
            return this.console.error.bind(this.console, this.getTime() + ' ERROR ' + this.className + ' - ');
        }
        this.enabled = false;
        return noop;
    }
    toggleDebugMode() {
        return this.svyLogConfiguration.isDebugMode = !this.svyLogConfiguration.isDebugMode;
    }
    get logLevel() {
        return this.svyLogConfiguration.level;
    }
    set logLevel(level) {
        this.svyLogConfiguration.level = level;
    }
    getTime() {
        const time = new Date();
        return time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();
    }
}
export class LoggerFactory {
    constructor(windowRefService) {
        this.windowRefService = windowRefService;
        this.instances = {};
        windowRefService.nativeWindow.logFactory = this;
        this.defaultLogConfiguration = windowRefService.nativeWindow.svyLogConfiguration;
        if (this.defaultLogConfiguration == null) {
            this.defaultLogConfiguration = new LogConfiguration();
            windowRefService.nativeWindow.svyLogConfiguration = this.defaultLogConfiguration;
            windowRefService.nativeWindow.logLevels = { error: LogLevel.ERROR, debug: LogLevel.DEBUG, info: LogLevel.INFO, warn: LogLevel.WARN, spam: LogLevel.SPAM };
        }
    }
    getLogger(cls) {
        if (this.instances[cls] === undefined) {
            this.instances[cls] = new LoggerService(this.windowRefService, new LogConfiguration(this.defaultLogConfiguration.isDebugMode, this.defaultLogConfiguration.level), cls);
        }
        return this.instances[cls];
    }
}
LoggerFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: LoggerFactory, deps: [{ token: i1.WindowRefService }], target: i0.ɵɵFactoryTarget.Injectable });
LoggerFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: LoggerFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: LoggerFactory, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.WindowRefService }]; } });
//# sourceMappingURL=data:application/json;base64,