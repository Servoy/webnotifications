{"version":3,"file":"stylesheet-processor.js","sourceRoot":"","sources":["../../../src/lib/styles/stylesheet-processor.ts"],"names":[],"mappings":";;;AAAA,6CAA6C;AAC7C,+BAA4B;AAC5B,qDAAqD;AACrD,2BAA4B;AAC5B,mDAA8E;AAE9E,oCAAoC;AAEpC,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,2BAAiB,CAAA;IACjB,uBAAa,CAAA;AACf,CAAC,EAHW,MAAM,GAAN,cAAM,KAAN,cAAM,QAGjB;AAgBD,MAAa,mBAAmB;IAK9B,YACmB,QAAgB,EAChB,MAAe,EACf,iBAA4B;QAF5B,aAAQ,GAAR,QAAQ,CAAQ;QAChB,WAAM,GAAN,MAAM,CAAS;QACf,sBAAiB,GAAjB,iBAAiB,CAAW;QAE7C,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,IAAI,WAAM,EAAE,CAAC;IACjF,CAAC;IAED,OAAO,CAAC,QAAgB;QACtB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,IAAI,uBAAM,CAAC,WAAI,CAAC,SAAS,EAAE,kCAAkC,CAAC,CAAC,CAAC;SAC/E;QAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,GAAG,CAAC,KAAK,CAAC,8BAA8B,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC1E;QAED,MAAM,aAAa,GAAkB;YACnC,QAAQ;YACR,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,+BAAc,EAAE,CAAC;QAEvC,IAAI;YACF,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE,aAAa,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YAE7F,6BAA6B;YAC7B,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE3B,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,qCAAoB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;YAC/E,IAAI,KAAK,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;aACxB;YAED,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACvC,OAAO,GAAG,CAAC;SACZ;gBAAS;YACR,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACxB,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;SACrB;IACH,CAAC;CACF;AAtDD,kDAsDC","sourcesContent":["import * as browserslist from 'browserslist';\nimport { join } from 'path';\nimport * as findCacheDirectory from 'find-cache-dir';\nimport { tmpdir } from 'os';\nimport { MessageChannel, receiveMessageOnPort, Worker } from 'worker_threads';\n\nimport * as log from '../utils/log';\n\nexport enum CssUrl {\n  inline = 'inline',\n  none = 'none',\n}\nexport interface WorkerOptions {\n  filePath: string;\n  basePath: string;\n  browserslistData: string[];\n  cssUrl?: CssUrl;\n  styleIncludePaths?: string[];\n  cachePath: string;\n}\n\nexport interface WorkerResult {\n  css: string;\n  warnings: string[];\n  error?: string;\n}\n\nexport class StylesheetProcessor {\n  private browserslistData: string[] | undefined;\n  private worker: Worker | undefined;\n  private readonly cachePath: string;\n\n  constructor(\n    private readonly basePath: string,\n    private readonly cssUrl?: CssUrl,\n    private readonly styleIncludePaths?: string[],\n  ) {\n    this.cachePath = findCacheDirectory({ name: 'ng-packagr-styles' }) || tmpdir();\n  }\n\n  process(filePath: string) {\n    if (!this.worker) {\n      this.worker = new Worker(join(__dirname, './stylesheet-processor-worker.js'));\n    }\n\n    if (!this.browserslistData) {\n      log.debug(`determine browserslist for ${this.basePath}`);\n      this.browserslistData = browserslist(undefined, { path: this.basePath });\n    }\n\n    const workerOptions: WorkerOptions = {\n      filePath,\n      basePath: this.basePath,\n      cssUrl: this.cssUrl,\n      styleIncludePaths: this.styleIncludePaths,\n      browserslistData: this.browserslistData,\n      cachePath: this.cachePath,\n    };\n\n    const ioChannel = new MessageChannel();\n\n    try {\n      const signal = new Int32Array(new SharedArrayBuffer(4));\n      this.worker.postMessage({ signal, port: ioChannel.port1, workerOptions }, [ioChannel.port1]);\n\n      // Sleep until signal[0] is 0\n      Atomics.wait(signal, 0, 0);\n\n      const { css, warnings, error } = receiveMessageOnPort(ioChannel.port2).message;\n      if (error) {\n        throw new Error(error);\n      }\n\n      warnings.forEach(msg => log.warn(msg));\n      return css;\n    } finally {\n      ioChannel.port1.close();\n      ioChannel.port2.close();\n      this.worker.unref();\n    }\n  }\n}\n"]}